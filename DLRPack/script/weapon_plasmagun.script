/***********************************************************************

weapon_plasmagun.script

***********************************************************************/

#define PLASMAGUN_FIRERATE			0.125 //changed by Tim
#define PLASMAGUN_LOWAMMO			10
#define PLASMAGUN_NUMPROJECTILES	1

// blend times
#define PLASMAGUN_IDLE_TO_LOWER		4
#define PLASMAGUN_IDLE_TO_FIRE		1
#define	PLASMAGUN_IDLE_TO_RELOAD	4
#define PLASMAGUN_RAISE_TO_IDLE		4
#define PLASMAGUN_FIRE_TO_IDLE		4
#define PLASMAGUN_RELOAD_TO_IDLE	4

object weapon_plasmagun : weapon_base {
	float		next_attack;
	float		spread;
	entity 		capture; //Save target for aiming
	vector		hoverpoint; //Relative point to aim
	string		hoverjoint; //Relative joint to aim
	
	void		init();
	
	void		Lower();
	void		Raise();
	void		Idle();
	void		Fire();
	void		Reload();
	void		ExitCinematic();
};

void weapon_plasmagun::init() {
	next_attack = 0;
	spread		= getFloatKey( "spread" );
	weaponState( "Raise", 0 );
}

void weapon_plasmagun::Raise() {
	sys.print("Weapon toggler");
	weaponRising();
	playAnim( ANIMCHANNEL_ALL, "raise" );
	waitUntil( animDone( ANIMCHANNEL_ALL, PLASMAGUN_RAISE_TO_IDLE ) );
	weaponState( "Idle", PLASMAGUN_RAISE_TO_IDLE );
}

void weapon_plasmagun::Lower() {
	weaponLowering();
	playAnim( ANIMCHANNEL_ALL, "putaway" );
	waitUntil( animDone( ANIMCHANNEL_ALL, 0 ) );
	weaponHolstered();
	waitUntil( WEAPON_RAISEWEAPON );
	weaponState( "Raise", 0 );
}

void weapon_plasmagun::Idle() {
	float currentTime;
	float ammoClip;
	float avail;
	float clip_size;

	clip_size = clipSize();	
	
	if ( !ammoInClip() ) {
		weaponOutOfAmmo();
	} else {
		weaponReady();
	}
	playCycle( ANIMCHANNEL_ALL, "idle" );
	while( 1 ) {
		if ( WEAPON_LOWERWEAPON ) {
			weaponState( "Lower", PLASMAGUN_IDLE_TO_LOWER );
		}
		currentTime = sys.getTime();
		ammoClip = ammoInClip();
		if ( ( currentTime >= next_attack ) && WEAPON_ATTACK ) {
			if ( ammoClip > 0 ) {
				weaponState( "Fire", PLASMAGUN_IDLE_TO_FIRE );
			} else if ( ammoAvailable() > 0 ) {
				if ( autoReload() ) {
					netReload();
					weaponState( "Reload", PLASMAGUN_IDLE_TO_RELOAD );
				}
			}
		}
		if ( WEAPON_RELOAD && ( ammoAvailable() > ammoClip ) && ( ammoClip < clip_size ) ) {
			netReload();
			weaponState( "Reload", PLASMAGUN_IDLE_TO_RELOAD );
		}
		if ( WEAPON_NETRELOAD ) {
			WEAPON_NETRELOAD = false;
			weaponState( "Reload", PLASMAGUN_IDLE_TO_RELOAD );			
		}
		waitFrame();
	}
}


void ControlSpawn(entity prjID,entity owID,entity enyID,vector hoverpoint,string hoverjoint)
{
vector prjAng;
vector prjAngNeed;
vector prjAngNew;
vector prjFwd;
vector prjFwd2;
vector prjVel;
vector prjToEnemy;
float pspeed;
float multex;
float joh;
float timeout;

	if (!prjID || !owID || !enyID)
		return;

	while (prjID.getProjectileState() < PROJECTILE_LAUNCHED)
	{
		sys.waitFrame();
	}

	pspeed = sys.vecLength(prjID.getLinearVelocity()); //Get speed from the projectile def
	prjID.setAngles(sys.VecToAngles(prjID.getLinearVelocity()));	   //Reset angles to normal
	multex = 0.09;

	if (!prjID || !owID || !enyID)
		return;

	while (prjID.getProjectileState() < PROJECTILE_FIZZLED && !(!enyID))
	{
		sys.waitFrame();
		prjAng = prjID.getAngles();
		prjFwd = sys.angToForward(prjAng);

		if ( hoverjoint )
		{
			joh = enyID.getJointHandle(hoverjoint);
			prjFwd2 = enyID.getJointPos(joh)+hoverpoint - prjID.getWorldOrigin();
		}else{
			prjFwd2 = enyID.getWorldOrigin()+hoverpoint - prjID.getWorldOrigin();
		}

		prjAngNeed = sys.VecToAngles(prjFwd2);

		prjAngNew = anglemod180(prjAngNeed - prjAng)*multex;
		prjID.setAngles(prjAng+prjAngNew);

		prjVel = prjFwd*pspeed;
		prjID.setLinearVelocity(prjVel);
		multex += 0.001;
	}
}

void weapon_plasmagun::Fire() {
	float ammoClip;
	float currentTime;
	float joh;

	vector prjAng;
	vector prjFwd;
	entity midball;	

	next_attack = sys.getTime() + PLASMAGUN_FIRERATE;
	
	ammoClip = ammoInClip();
	if ( ammoClip == PLASMAGUN_LOWAMMO ) {
		startSound( "snd_lowammo", SND_CHANNEL_ITEM, true );
	}

	midball = createProjectile();
	if (midball)
	{
		midball.show();
		midball.unbind();
		thread ControlSpawn(midball,getOwner(),capture,hoverpoint, hoverjoint);

		launchProjectiles( PLASMAGUN_NUMPROJECTILES, spread, 0, 1.0, 1.0 );
		if (!capture && WEAPON_MODE & 2)
		{
			prjAng = midball.getAngles();
			prjFwd = sys.angToUp(prjAng);
			sys.tracePoint(midball.getWorldOrigin(),midball.getWorldOrigin()+prjFwd*1000,MASK_SOLID|CONTENTS_RENDERMODEL,getOwner());
			capture = sys.getTraceEntity();
			hoverjoint = sys.getTraceJoint();
			if ( hoverjoint )
			{
				joh = capture.getJointHandle(hoverjoint);
				hoverpoint = sys.getTraceEndPos() - capture.getJointPos(joh);
			}else{
				hoverpoint = sys.getTraceEndPos() - capture.getWorldOrigin();
			}
		}
		if (!(WEAPON_MODE & 2)) {
			capture = $null_entity;
		}

		midball = $null_entity;
	}
	playAnim( ANIMCHANNEL_ALL, "fire" );
	while( !animDone( ANIMCHANNEL_ALL, PLASMAGUN_FIRE_TO_IDLE ) ) {
		currentTime = sys.getTime();
		ammoClip = ammoInClip();
		if ( ( currentTime >= next_attack ) && WEAPON_ATTACK && ( ammoClip > 0 ) ) {
			weaponState( "Fire", 0 );
		}
		waitFrame();
	}

	capture = $null_entity;
	weaponState( "Idle", PLASMAGUN_FIRE_TO_IDLE );
}

void weapon_plasmagun::Reload() {
	weaponReloading();
	playAnim( ANIMCHANNEL_ALL, "reload" );
	waitUntil( animDone( ANIMCHANNEL_ALL, PLASMAGUN_RELOAD_TO_IDLE ) );
	addToClip( clipSize() );
	weaponState( "Idle", PLASMAGUN_RELOAD_TO_IDLE );
}

void weapon_plasmagun::ExitCinematic() {
	next_attack = 0;
	weaponState( "Idle", 0 );
}
